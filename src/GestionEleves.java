import java.io.*;
import java.util.Scanner;

public class GestionEleves {

    private final Eleve[] tableauEleves;  // Tableau pour stocker les objets 'Eleve'
    private int nombreEleves;  // Compteur d'√©l√®ves ajout√©s

    // Constructeur de la classe GestionEleves
    public GestionEleves(int capacite) {
        tableauEleves = new Eleve[capacite];  // Cr√©e un tableau d'√©l√®ves avec la capacit√© sp√©cifi√©e
        nombreEleves = 0;  // Aucun √©l√®ve au d√©part
        chargerElevesCSV();  // Charge les √©l√®ves depuis le fichier CSV
        sauvegarderElevesCSV();  // Sauvegarde les √©l√®ves dans un fichier CSV
    }

    // M√©thode d'initialisation, permet de charger les √©l√®ves depuis le fichier CSV
    public void init() {
        chargerElevesCSV();  // Appeler cette m√©thode dans un autre endroit si n√©cessaire
    }

    // Sauvegarder les √©l√®ves dans un fichier CSV
    public void sauvegarderElevesCSV() {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("eleves.csv"))) {
            // Parcourt le tableau des √©l√®ves et √©crit chaque √©l√®ve dans le fichier CSV
            for (int i = 0; i < nombreEleves; i++) {
                Eleve eleve = tableauEleves[i];  // R√©cup√®re l'√©l√®ve √† la position i
                writer.write(eleve.getNom() + "," + eleve.getPrenom() + "," + eleve.getClasse() + "," + eleve.getMoyenne());
                writer.newLine();  // Ajoute une nouvelle ligne apr√®s chaque √©l√®ve
            }
        } catch (IOException e) {
            e.printStackTrace();  // Affiche une erreur si un probl√®me survient lors de l'√©criture dans le fichier
        }
    }

    // Charger les √©l√®ves depuis un fichier CSV
    public void chargerElevesCSV() {
        File file = new File("eleves.csv");  // Ouvre le fichier CSV existant
        if (!file.exists()) return;  // Si le fichier n'existe pas, on ne fait rien
    
        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            String ligne;
            // Lit chaque ligne du fichier CSV
            while ((ligne = reader.readLine()) != null) {
                String[] data = ligne.split(",");  // S√©pare chaque ligne par la virgule
                if (data.length == 4) {  // V√©rifie qu'il y a bien 4 √©l√©ments (nom, pr√©nom, classe, moyenne)
                    String nom = data[0];
                    String prenom = data[1];
                    String classe = data[2];
                    double moyenne = Double.parseDouble(data[3]);

                    Eleve eleve = new Eleve(nom, prenom, classe, moyenne);  // Cr√©e un objet 'Eleve'
                    ajouterEleve(eleve);  // Ajoute l'√©l√®ve au tableau
                }
            }
        } catch (IOException e) {
            e.printStackTrace();  // Affiche une erreur en cas de probl√®me de lecture
        }
    }

    // Ajouter un √©l√®ve dans le tableau
    public void ajouterEleve(Eleve eleve) {
        if (nombreEleves < tableauEleves.length) {  // V√©rifie qu'il y a de la place dans le tableau
            tableauEleves[nombreEleves] = eleve;  // Ajoute l'√©l√®ve √† la position suivante du tableau
            nombreEleves++;  // Incr√©mente le nombre d'√©l√®ves
            sauvegarderElevesCSV();  // Sauvegarde les √©l√®ves dans le fichier CSV apr√®s l'ajout
        } else {
            System.out.println("‚ùå Le tableau d'√©l√®ves est plein.");  // Affiche un message si le tableau est plein
        }
    }

    // Afficher tous les √©l√®ves
    public void afficherEleves() {
        if (nombreEleves == 0) {
            System.out.println("‚ùå Aucun √©l√®ve dans le tableau.");  // Si aucun √©l√®ve n'est pr√©sent
        } else {
            System.out.println("\nüìú Liste des √©l√®ves :");
            // Affiche les d√©tails de chaque √©l√®ve
            for (int i = 0; i < nombreEleves; i++) {
                System.out.println(tableauEleves[i].toString());  // Affiche l'objet 'Eleve' √† la position i
            }
        }
    }

    // Rechercher un √©l√®ve par son nom
    public void rechercherEleve(String nomRecherche) {
        boolean trouve = false;
        for (int i = 0; i < nombreEleves; i++) {
            if (tableauEleves[i].getNom().equalsIgnoreCase(nomRecherche)) {  // Recherche par nom
                System.out.println(tableauEleves[i].toString());  // Affiche les d√©tails de l'√©l√®ve trouv√©
                trouve = true;
            }
        }
        if (!trouve) {
            System.out.println("üîç √âl√®ve non trouv√©.");  // Affiche un message si l'√©l√®ve n'est pas trouv√©
        }
    }

    // Supprimer un √©l√®ve par sa moyenne
    public void supprimerEleveParMoyenne(double moyenneCritere) {
        for (int i = 0; i < nombreEleves; i++) {
            if (tableauEleves[i].getMoyenne() == moyenneCritere) {  // V√©rifie si l'√©l√®ve a la moyenne sp√©cifi√©e
                // D√©cale tous les √©l√®ves suivants d'une position pour combler le vide
                for (int j = i; j < nombreEleves - 1; j++) {
                    tableauEleves[j] = tableauEleves[j + 1];
                }
                tableauEleves[nombreEleves - 1] = null;  // Lib√®re la derni√®re case
                nombreEleves--;  // D√©cr√©mente le nombre d'√©l√®ves
                System.out.println("üóë √âl√®ve supprim√© avec succ√®s !");
                sauvegarderElevesCSV();  // Sauvegarde les modifications dans le fichier CSV apr√®s la suppression
                return;
            }
        }
        System.out.println("‚ùå Aucun √©l√®ve avec cette moyenne.");  // Affiche un message si aucun √©l√®ve ne correspond √† la moyenne
    }

    // Juger les √©l√®ves en fonction de leur moyenne
    public void jugerEleves() {
        if (nombreEleves == 0) {
            System.out.println("‚ùå Aucun √©l√®ve √† juger.");  // Si aucun √©l√®ve n'est pr√©sent
            return;
        }

        System.out.println("\n=====================================");
        System.out.println("     ‚öñ Jugement des √âl√®ves ‚öñ      ");
        System.out.println("=====================================");

        for (int i = 0; i < nombreEleves; i++) {
            Eleve eleve = tableauEleves[i];
            double moyenne = eleve.getMoyenne();

            // Juger en fonction de la moyenne de l'√©l√®ve
            if (moyenne >= 10) {
                System.out.println("‚úÖ " + eleve.getNom() + " " + eleve.getPrenom() + " : R√©ussite üéâ !");
                eleve.setClasse(passerClasseSuperieure(eleve.getClasse()));  // Passe l'√©l√®ve √† la classe sup√©rieure
            } else if (moyenne < 7) {
                System.out.println("‚ùå " + eleve.getNom() + " " + eleve.getPrenom() + " : √âchec üòû.");
            } else {
                System.out.println("‚ö† " + eleve.getNom() + " " + eleve.getPrenom() + " : Se Repr√©sente üìö.");
                eleve.setClasse(passerClasseSuperieure(eleve.getClasse()));  // Passe l'√©l√®ve √† la classe sup√©rieure
            }
        }

        System.out.println("=====================================");
    }

    // M√©thode priv√©e pour passer un √©l√®ve √† la classe sup√©rieure
    private String passerClasseSuperieure(String classeActuelle) {
        if (classeActuelle.matches("\\d+√®me ann√©e")) {  // Si la classe est sous forme d'ann√©e (ex: 1√®re ann√©e)
            int annee = Integer.parseInt(classeActuelle.split("√®me")[0]);  // R√©cup√®re le num√©ro de l'ann√©e
            return (annee + 1) + "√®me ann√©e";  // Retourne l'ann√©e suivante
        }
        return classeActuelle;  // Si ce n'est pas un format d'ann√©e, on retourne la classe actuelle
    }

    // M√©thodes getter pour la classe GestionEleves
    public Eleve[] getTableauEleves() {
        return tableauEleves;  // Retourne le tableau d'√©l√®ves
    }

    public int getNombreEleves() {
        return nombreEleves;  // Retourne le nombre d'√©l√®ves
    }

    // Menu interactif
    public void afficherMenu() {
        try (Scanner scanner = new Scanner(System.in)) {
            int choix;

            do {
                System.out.println("\n=====================================");
                System.out.println("   üè´ Gestion des √âl√®ves üè´");
                System.out.println("=====================================");
                System.out.println("| 1  | üìú Afficher les √©l√®ves    |");
                System.out.println("| 2  | ‚ûï Ajouter un √©l√®ve       |");
                System.out.println("| 3  | üîç Rechercher un √©l√®ve    |");
                System.out.println("| 4  | üóë Supprimer un √©l√®ve      |");
                System.out.println("| 5  | ‚öñ Juger les √©l√®ves        |");
                System.out.println("| 0  | üö™ Quitter                |");
                System.out.println("=====================================");
                System.out.print("üëâ Entrez votre choix : ");
                choix = scanner.nextInt();
                scanner.nextLine();  // Consommer la nouvelle ligne

                switch (choix) {
                    case 1 -> afficherEleves();  // Affiche tous les √©l√®ves
                    case 2 -> {
                        // Permet √† l'utilisateur d'ajouter un √©l√®ve
                        System.out.print("üìå Nom de l'√©l√®ve : ");
                        String nom = scanner.nextLine();
                        System.out.print("üìå Pr√©nom de l'√©l√®ve : ");
                        String prenom = scanner.nextLine();
                        System.out.print("üìå Classe de l'√©l√®ve : ");
                        String classe = scanner.nextLine();
                        System.out.print("üìå Moyenne de l'√©l√®ve : ");
                        double moyenne = scanner.nextDouble();
                        Eleve eleve = new Eleve(nom, prenom, classe, moyenne);
                        ajouterEleve(eleve);
                    }
                    case 3 -> {
                        // Permet √† l'utilisateur de rechercher un √©l√®ve
                        System.out.print("üîç Entrez le nom de l'√©l√®ve √† rechercher : ");
                        String nomRecherche = scanner.nextLine();
                        rechercherEleve(nomRecherche);
                    }
                    case 4 -> {
                        // Permet √† l'utilisateur de supprimer un √©l√®ve par moyenne
                        System.out.print("üóë Entrez la moyenne pour suppression : ");
                        double moyenneCritere = scanner.nextDouble();
                        supprimerEleveParMoyenne(moyenneCritere);
                    }
                    case 5 -> jugerEleves();  // Juger les √©l√®ves
                    case 0 -> System.out.println("üëã Au revoir !");  // Quitter le programme
                    default -> System.out.println("‚ö† Choix invalide, veuillez r√©essayer.");  // Message en cas de choix invalide
                }
            } while (choix != 0);  // Le menu continue tant que le choix n'est pas 0
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("‚ùå Erreur : " + e.getMessage());  // G√©rer les erreurs d'entr√©e de l'utilisateur
        }
    }

    // M√©thode principale pour d√©marrer l'application
    public static void main(String[] args) {
        GestionEleves gestion = new GestionEleves(1000);  // Cr√©e une instance de la classe GestionEleves avec une capacit√© de 1000 √©l√®ves
        gestion.afficherMenu();  // Affiche le menu interactif
    }
}
